<% content_for :title do %>編集<% end %>
<% content_for :meta_tags do %>
  <%= display_meta_tags(:noindex => true) %>
<% end %>
<%= stylesheet_link_tag "create-edit" %>
<%= render 'shared/create-edit-header' %>
<%= stylesheet_link_tag "aim-delete-dialog" %>

<!--<= javascript_pack_tag 'aim-delete-dialog' %>
<= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
<script src="< asset_path('aim-delete-dialog.js') %>"></script>
<script type="text/javascript" async=true src="aim-delete-dialog.js"></script>
-->


<div class="aim_create_edit_wrap">
      <!-- form_with(model: @aim, url: "/aim/update/"+@aim.id.to_s, local: true, html:{ class:"edit-form" ,id:"edit-form"}) do |form| %>-->
      <%= form_with(url: "/aim/update/"+@aim.id.to_s, local: true, html:{ class:"edit-form" ,id:"edit-form"}) do |form| %>

        <div class="field">
          <%= form.text_field :title, required: true, placeholder: "目標タイトル", class: "title", id:"title",value:@aim.title%>
        </div>

      <div class="toggle-container">
            <p>サムネイルを設定する</p>
            <label class="toggle-switch">
                <input type="checkbox" id="toggle" />
                <span class="slider round"></span>
            </label>

            <div class="uproad_wrap" id="uproad_wrap">
                <%= form.file_field :aim_thumb_img, required: true, accept: 'image/gif, image/jpeg, image/png' %>
                <p>選択されていません</p>
            </div>
        </div>
        <!--
        <div class="field">
          <%= form.label :content %>
          <%= form.text_field :content, required: true %>
        </div>
        -->

        <div class="field edit-container">
          <%= form.text_area :content, required: true, placeholder: "内容をMarkdown記法で書いていきましょう!", class: "edit-input", id:"edit-input", rows: 20 ,value:@aim.content %>
          <!-- form.text_area :content, required: true, placeholder: "aaaaaaa", class: "edited-input", id:"edited-input", rows: 20 -->
          <div id="previewArea" class="previewArea"></div>
        </div>

      <% end %>

      <!--aim削除-->
      <button id="open-dialog"class="aim-delete-btn alert alert-danger" role="alert">削除</button>
      <div id="dialog-overlay" class="dialog-overlay" style=" display:none;">
        <div id="dialog-box" class="dialog-box">
          <p>本当に削除しますか？</p>
          <button id="confirm-delete">はい</button>
          <button id="cancel-delete">いいえ</button>
        </div>
      </div>

      <%= form_with(url: "/aim/delete/"+@aim.id.to_s, local: true, html:{ class:"aim-delete-form" ,id:"aim-delete-form"}) do |form| %>

      <% end %>
</div>

<script>
document.getElementById("submitButton").addEventListener("click", function() {
  document.getElementById("edit-form").submit();
});
</script>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

<script>
const textarea = document.getElementById('edit-input');
//const characterCount = document.getElementById('edited-input');
const previewArea = document.getElementById('previewArea');

textarea.addEventListener('input', function() {
  const text = textarea.value;
  const count = text.length;
  //characterCount.textContent = `${count} characters`;

  //編集textareaの文字列のtextarea.valueをマークダウンに変換
  //let html = marked(textarea.value);

  //characterCount.textContent =textarea.value //マークダウンをプレビューに入れる
  //characterCount.textContent =html

  //iDDivHtmlArea.innerHTML = marked('# This is Markdown Header #');

  //characterCount.innerHTML =marked.parse('# Marked in the browser\n\nRendered by **marked**.');
  //characterCount.innerHTML =marked.parse(textarea.value);
  previewArea.innerHTML =marked.parse(textarea.value);
});
</script>

<script>
//aim削除
const openDialogButton = document.getElementById('open-dialog');
const dialogOverlay = document.getElementById('dialog-overlay');
const dialogBox = document.getElementById('dialog-box');
const confirmDeleteButton = document.getElementById('confirm-delete');
const cancelDeleteButton = document.getElementById('cancel-delete');

openDialogButton.addEventListener('click', () => {
  dialogOverlay.style.display = 'flex';
});

function closeDialog() {
  dialogOverlay.style.display = 'none';
}

dialogOverlay.addEventListener('click', (e) => {
  if (e.target === dialogOverlay) {
    closeDialog();
  }
});

confirmDeleteButton.addEventListener('click', () => {
  // 削除の確認を実行
  // ここに削除処理を追加
  document.getElementById("aim-delete-form").submit();
  closeDialog();
});

cancelDeleteButton.addEventListener('click', () => {
  closeDialog();
});
</script>



<script>
//サムネ設定のトグル切替
const toggleSwitch = document.getElementById('toggle');
const uproad_wrap = document.getElementById('uproad_wrap');

toggleSwitch.addEventListener('change', function () {
    const slider = document.querySelector('.slider');
    if (this.checked) {
        slider.style.backgroundColor = '#2196F3';
        uproad_wrap.style.display = 'block';
        console.log("true");
    } else {
        slider.style.backgroundColor = '#ccc';
        uproad_wrap.style.display = 'none';
        console.log("false・img_urlをdefaultにする");

    }
});
</script>